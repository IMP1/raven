up to [here](http://craftinginterpreters.com/functions.html)

# Tests

Write some simple tests that work with existing interpreter (that should also forwards compatible).
Write one for each type of expression and statement (that are implemented thus far).

# Strings

Ruby has 'single quoted strings' and "double quoted strings". C# has $"" and @"" and "".
I think I like the latter better. It's hard to tell "" and '' apart sometimes. Obvs don't have to use $ and @ though.

# Operators

Add a long list of available operators, and just don't define most of them.


# Gotchas

Accessing an undefined variable is a compile-time error

This means mutually recursive functions will need some tweaking to work. 
Search for `isEven()` [here](http://craftinginterpreters.com/statements-and-state.html) for more details.

# Sublime-Syntax

Work on a Sublime-Syntax file for Raven. It can live in this project.

# Function declarations

`func foo = {}` or just `func foo {}`. The former is more consistent with other variable declarations. 
The latter seems nicer.

# Return

Currently (because I don't have semi colons - which i don't mind adding), there's no way to tell the following apart
```
    return foo
```
```
    return
    foo
```
I would rather not use newlines as a significant semantic feature. So currently I have this:
`return(foo)`
but it's not a function is it. And if it is, the return without any values should also have parentheses.

Maybe I could just check for a close brace, and if not then it's the return value. There's no need to have anything after a return, is there?
