struct Node {

    int value
    Node? child = NULL

    def add (Node self, Node new) {
        self.child = new '' Type checker here doesn't know what fields `self` has, 
                         '' and so can't evaluate the `child` property. :/
    }

}

struct LinkedList {

    Node? head = NULL

    def is_empty (LinkedList list) bool {
        return (list.head == NULL)
    }

    def add (LinkedList self, Node new) {
        with (Node node = self.head) {
            print("Adding new node.\n")
            node.add(node, new)
        } else {
            print("Setting head to new node.\n")
            self.head = new
        }
    }

    def foreach (LinkedList self, func<(Node)> f) {
        with (Node last = self.head) {
            f(last)
            while (last.child != NULL) {
                with (Node next = last.child) {
                    last = next
                    f(last)
                }
            }
        }
    }

}

LinkedList list_1 = LinkedList {}

print(typeof(LinkedList))
print("\n")
print(typeof(list_1))
print("\n")

test list_1.is_empty(list_1)

Node n1 = Node {
    value = 3
}

Node n2 = Node {
    value = 5
}

print("List 1 = ")
print(list_1)
print("\n")

list_1.add(list_1, n1)

print("List 1 = ")
print(list_1)
print("\n")

list_1.add(list_1, n2)

print("List 1 = ")
print(list_1)
print("\n")

test !list_1.is_empty(list_1)

list_1.foreach(list_1, (Node n) {
    print(n.value)
    print(",\n")
})
